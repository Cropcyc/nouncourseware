{"version":3,"sources":["http-common.js","services/course.service.js","components/add-course.component.js","components/course.component.js","components/courses-list.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","AddCourse","props","onChangeTitle","bind","onChangeCourseDetail","saveCourse","newCourse","state","courseDetail","published","submitted","e","this","setState","target","value","CourseDataService","then","response","console","log","catch","message","window","alert","className","onClick","htmlFor","type","required","onChange","name","Component","Course","getCourse","updatePublished","updateCourse","deleteCourse","currentCourse","match","params","prevState","status","update","confirm","history","push","CourseList","courses","currentIndex","searchQuery","onChangeSearchQuery","retrieveCourses","refreshCourseList","setActiveCourse","removeAllCourses","getAll","index","course","deleteAll","findByTitle","placeholder","map","to","App","href","path","element","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.960ffd38.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport default axios.create({\r\n    baseURL: 'http://localhost:8080/api',\r\n    headers: {\r\n        'Content-type': 'application/json'\r\n    }\r\n})","import http from '../http-common'\r\n\r\nclass CourseDataService {\r\n    getAll() {\r\n        return http.get(`/courses`)\r\n    }\r\n\r\n    get(id) {\r\n        return http.get(`/courses/${id}`)\r\n    }\r\n\r\n    create(data) {\r\n        return http.post(`/courses`, data)\r\n    }\r\n\r\n    update(id, data) {\r\n        return http.put(`/courses/${id}`, data)\r\n    }\r\n\r\n    delete(id) {\r\n        return http.delete(`/courses/${id}`)\r\n\r\n    }\r\n    \r\n    deleteAll() {\r\n        return http.delete(`/courses`)\r\n    }\r\n\r\n    findByTitle(title) {\r\n        return http.get(`/courses?title=${title}`)\r\n    }\r\n}\r\n\r\nexport default new CourseDataService()","import React, { Component } from 'react'\r\nimport CourseDataService from '../services/course.service'\r\n\r\nexport default class AddCourse extends Component {\r\n    constructor(props) {\r\n            super(props)\r\n            this.onChangeTitle = this.onChangeTitle.bind(this)\r\n            this.onChangeCourseDetail = this.onChangeCourseDetail.bind(this)\r\n            this.saveCourse = this.saveCourse.bind(this)\r\n            this.newCourse = this.newCourse.bind(this)\r\n\r\n            this.state = {\r\n                id: null,\r\n                title: '',\r\n                courseDetail: '',\r\n                published: false,\r\n                submitted: false,\r\n            }\r\n        }\r\n\r\n        onChangeTitle(e) {\r\n            this.setState({\r\n                title: e.target.value\r\n            })\r\n        }\r\n\r\n        onChangeCourseDetail(e) {\r\n            this.setState({\r\n                courseDetail: e.target.value\r\n            })\r\n        }\r\n        \r\n        saveCourse() {\r\n            let data = {\r\n                title: this.state.title,\r\n                courseDetail: this.state.courseDetail\r\n            }\r\n\r\n            CourseDataService.create(data)\r\n                .then(response => {\r\n                    this.setState({\r\n                        id: response.data.id,\r\n                        title: response.data.title,\r\n                        courseDetail: response.data.courseDetail,\r\n                        published: response.data.published,\r\n                        submitted: true\r\n                    })\r\n                    console.log(response.data)\r\n                })\r\n                .catch(e => {\r\n                    console.log(e.message)\r\n                    window.alert(e.message)\r\n                })\r\n        }\r\n\r\n        newCourse(){\r\n            this.setState({\r\n                id: null,\r\n                title: '',\r\n                courseDetail: '',\r\n                published: false,\r\n                submitted: false\r\n            })\r\n        }\r\n\r\n        render(){\r\n            return (\r\n               <div className='submit-form'>\r\n                   {this.state.submitted ? (\r\n                       <div>\r\n                           <h4>Successfully Added Course Material</h4>\r\n                           <button className='btn btn-success' onClick={this.newCourse}>\r\n                               Add Course Material\r\n                           </button>\r\n                        </div>\r\n                   ) : (\r\n                       <div>\r\n                           <div className='form-group'>\r\n                               <label htmlFor='title'>Title</label>\r\n                               <input\r\n                                    type='text'\r\n                                    className='form-control'\r\n                                    id='title'\r\n                                    required\r\n                                    value={this.state.title}\r\n                                    onChange={this.onChangeTitle}\r\n                                    name='title'\r\n                                />\r\n                            </div>\r\n\r\n                            <div className='form-group'>\r\n                                <label htmlFor='courseDetail'>Course Detail</label>\r\n                                <input\r\n                                    type='text'\r\n                                    className='form-control'\r\n                                    id='courseDetail'\r\n                                    required\r\n                                    value={this.state.courseDetail}\r\n                                    onChange={this.onChangeCourseDetail}\r\n                                    name='courseDetail'\r\n                                />\r\n                            </div>\r\n\r\n                            {/* <div className='form-group'>\r\n                                <input\r\n                                    type='file'\r\n                                    className='form-control'\r\n                                    id='foo'\r\n                                    value={this.state.uploadedfile}\r\n                                    onChange={this.onChangeFoo}\r\n                                    name='foo'\r\n                                />\r\n                            </div> */}\r\n\r\n                            <button onClick={this.saveCourse} className='btn btn-success'>\r\n                                Submit\r\n                            </button>\r\n                        </div>\r\n                   )}\r\n               </div> \r\n            )\r\n        }\r\n}","import React, { Component} from 'react'\r\nimport CourseDataService from '../services/course.service'\r\n\r\nexport default class Course extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.onChangeTitle = this.onChangeTitle.bind(this)\r\n        this.onChangeCourseDetail = this.onChangeCourseDetail.bind(this)\r\n        this.getCourse = this.getCourse.bind(this)\r\n        this.updatePublished = this.updatePublished.bind(this)\r\n        this.updateCourse = this.updateCourse.bind(this)\r\n        this.deleteCourse = this.deleteCourse.bind(this)\r\n\r\n        this.state = {\r\n            currentCourse: {\r\n                id: null,\r\n                title: '',\r\n                courseDetail: '',\r\n                published: false\r\n            },\r\n            message: ''\r\n        }\r\n    }\r\n\r\n        componentDidMount() {\r\n            this.getCourse(this.props.match.params.id)\r\n        }\r\n\r\n        onChangeTitle(e) {\r\n            const title = e.target.value\r\n\r\n            this.setState(prevState => {\r\n                return {\r\n                    currentCourse: {\r\n                        ...prevState.currentCourse,\r\n                        title: title\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        onChangeCourseDetail(e) {\r\n            const courseDetail = e.target.value\r\n\r\n            this.setState(prevState => ({\r\n                currentCourse: {\r\n                    ...prevState.currentCourse,\r\n                    courseDetail: courseDetail\r\n                }\r\n            }))\r\n        }\r\n\r\n        getCourse(id) {\r\n            CourseDataService.get(id)\r\n                .then(response => {\r\n                    this.setState({\r\n                        currentCourse: response.data\r\n                    })\r\n                    console.log(response.data)\r\n                })\r\n                .catch(e => {\r\n                    console.log(e)\r\n                })\r\n        }\r\n\r\n        updatePublished(status) {\r\n            let data = {\r\n                id: this.state.currentCourse.id,\r\n                title: this.state.currentCourse.title,\r\n                courseDetail: this.state.currentCourse.courseDetail,\r\n                published: status\r\n            }\r\n\r\n            CourseDataService.update(this.state.currentCourse.id, data)\r\n            .then(response => {\r\n                this.setState(prevState => ({\r\n                    currentCourse: {\r\n                        ...prevState.currentCourse,\r\n                        published: status\r\n                    }\r\n                }))\r\n                console.log(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n        }\r\n\r\n        updateCourse() {\r\n            CourseDataService.update(\r\n                this.state.currentCourse.id,\r\n                this.state.currentCourse\r\n            )\r\n                .then(response => {\r\n                    console.log(response.data)\r\n                    this.setState({\r\n                        message: 'Course update successful'\r\n                    })\r\n                })\r\n                .catch(e => {\r\n                    console.log(e)\r\n                })\r\n        }\r\n\r\n        deleteCourse() {\r\n            const result = window.confirm('This course will be permanently deleted')\r\n            result &&\r\n            CourseDataService.delete(this.state.currentCourse.id)\r\n                .then(response => {\r\n                    console.log(response.data)\r\n                    this.props.history.push('/courses')\r\n                })\r\n                .catch(e => {\r\n                    console.log(e.message)\r\n                    window.alert(e.message)\r\n                })\r\n        }\r\n\r\n        render() {\r\n            const { currentCourse } = this.state\r\n\r\n            return (\r\n                <div>\r\n                    {currentCourse ? (\r\n                        <div className='edit-form'>\r\n                            <h4>Course</h4>\r\n                            <form>\r\n                                <div className='form-group'>\r\n                                    <label htmlFor='title'>Title</label>\r\n                                    <input\r\n                                        type='text'\r\n                                        className='form-control'\r\n                                        id='title'\r\n                                        value={currentCourse.title}\r\n                                        onChange='this.onChangeTitle'\r\n                                    />\r\n                                </div>\r\n                                <div className='form-group'>\r\n                                    <label htmlFor='courseDetail'>Description</label>\r\n                                    <input\r\n                                        type='text'\r\n                                        className='form-control'\r\n                                        id='courseDetail'\r\n                                        value={currentCourse.courseDetail}\r\n                                        onChange={this.onChangeCourseDetail}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className='form-group'>\r\n                                    <label>\r\n                                        <strong>Status:</strong>\r\n                                    </label>\r\n                                    {currentCourse.published ? 'Published' : 'Pending'}\r\n                                </div>\r\n                            </form>\r\n\r\n                            {currentCourse.published ? (\r\n                                <button\r\n                                    className='badge badge-primary mr-2'\r\n                                    onClick={() => this.updatePublished(false)}\r\n                                >\r\n                                    Unpublish\r\n                                </button>\r\n                            ) : (\r\n                                <button\r\n                                    className='badge badge-primary mr-2'\r\n                                    onClick={() => this.updatePublished(true)}\r\n                                >\r\n                                    Publish\r\n                                </button>\r\n                            )}\r\n\r\n                            <button\r\n                                className='badge badge-danger mr-2'\r\n                                onClick={this.deleteCourse}\r\n                            >\r\n                                Delete\r\n                            </button>\r\n\r\n                            <button\r\n                                type='submit'\r\n                                className='badge badge-success'\r\n                                onClick={this.updateCourse}\r\n                            >\r\n                                Update\r\n                            </button>\r\n                            <p>{this.state.message}</p>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <br />\r\n                            <p> Select a course</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )\r\n        }\r\n}\r\n","import React, { Component } from 'react'\r\nimport CourseDataService from '../services/course.service'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class CourseList extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            courses: [],\r\n            currentCourse: null,\r\n            currentIndex: -1,\r\n            searchQuery: ''\r\n        }\r\n\r\n        this.onChangeSearchQuery = this.onChangeSearchQuery.bind(this)\r\n        this.retrieveCourses = this.retrieveCourses.bind(this)\r\n        this.refreshCourseList = this.refreshCourseList.bind(this)\r\n        this.setActiveCourse = this.setActiveCourse.bind(this)\r\n        this.removeAllCourses = this.removeAllCourses.bind(this)\r\n        this.searchQuery = this.searchQuery.bind(this)\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        this.retrieveCourses()\r\n    }\r\n\r\n    onChangeSearchQuery(e){\r\n        const searchQuery = e.target.value\r\n\r\n        this.setState({\r\n            searchQuery: searchQuery\r\n        })\r\n    }\r\n\r\n    retrieveCourses() {\r\n        CourseDataService.getAll()\r\n            .then(response => {\r\n                this.setState({\r\n                    courses: response.data\r\n                })\r\n                console.log(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    refreshCourseList(){\r\n        this.retrieveCourses()\r\n        this.setState({\r\n            currentCourse: null,\r\n            index: -1\r\n        })\r\n    }\r\n\r\n    setActiveCourse(course, index){\r\n        this.setState({\r\n            currentCourse: course,\r\n            currentIndex: index\r\n        })\r\n    }\r\n\r\n    removeAllCourses(){\r\n        const result = window.confirm(\"Delete ALL courses?\")\r\n        result &&\r\n        CourseDataService.deleteAll()\r\n            .then(response => {\r\n                console.log(response.data)\r\n                this.refreshCourseList()\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    searchQuery() {\r\n        CourseDataService.findByTitle(this.state.searchQuery)\r\n            .then(response => {\r\n                this.setState({\r\n                    courses: response.data\r\n                })\r\n                console.log(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    render(){\r\n        const { searchQuery, courses, currentCourse, currentIndex } = this.state\r\n\r\n        return (\r\n            <div className='list row'>\r\n            <div className='col-md-8'>\r\n                <div className='input-group mb-3'>\r\n                    <input\r\n                        type='text'\r\n                        className='form-control'\r\n                        placeholder='Look up with course title'\r\n                        value={searchQuery}\r\n                        onChange={this.onChangeSearchQuery}\r\n                    />\r\n                    <div className='input-group-append'>\r\n                        <button\r\n                            className='btn btn-outline-secondary'\r\n                            type='button'\r\n                            onClick={this.searchQuery}\r\n                        >\r\n                            Look up\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='col-md-6'>\r\n                <h4>Course List</h4>\r\n\r\n                <ul className='list-group'>\r\n                    {\r\n                        courses && \r\n                            courses.map((course, index) => (\r\n                                <li\r\n                                 className={\r\n                                     'list-group-item ' +\r\n                                     (index === currentIndex ? 'active' : '')\r\n                                 }\r\n                                 onClick={() => this.setActiveCourse(course, index)}\r\n                                 key={index}\r\n                                >\r\n                                    {course.title}\r\n                                </li>\r\n                        ))}\r\n                </ul>\r\n\r\n                <button \r\n                    className='m-3 btn btn-sm btn-danger'\r\n                    onClick={this.removeAllCourses}\r\n                >\r\n                    Delete All\r\n                </button>\r\n            </div>\r\n            <div className='col-md-6'>\r\n                {currentCourse ? (\r\n                    <div>\r\n                        <h4>Course</h4>\r\n                        <div>\r\n                            <label>\r\n                                <strong>Title:</strong>\r\n                            </label>{' '}\r\n                            {currentCourse.title}\r\n                        </div>\r\n                        <div>\r\n                            <label>\r\n                                <strong>Course Details:</strong>\r\n                            </label>{' '}\r\n                            {currentCourse.courseDetail}\r\n                        </div>\r\n                        <div>\r\n                            <label>\r\n                                <strong>Status:</strong>\r\n                            </label>{' '}\r\n                            {currentCourse.published ? 'Published' : 'Pending'}\r\n                        </div>\r\n\r\n                        <Link\r\n                            to={'/courses/' + currentCourse.id}\r\n                            className='badge badge-warning'\r\n                        >\r\n                            Edit\r\n                        </Link>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <br />\r\n                            <p>Select course</p>\r\n                        </div>\r\n                    )}\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react'\nimport { Routes, Route, Link} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nimport AddCourse from './components/add-course.component'\nimport Course from './components/course.component'\nimport CourseList from './components/courses-list.component'\n\nclass App extends Component {\n  render(){\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-success\">\n          <a href=\"/courses\" className=\"navbar-brand\">\n            NOUN Library\n          </a>\n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/\"} className=\"nav-link\">\n                Courses\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to={\"/add\"} className=\"nav-link\">\n                Add\n              </Link>\n            </li>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Routes>\n            <Route path=\"/\" element={<CourseList/>} />\n            <Route path=\"/add\" element={<AddCourse/>} />\n            <Route path=\"/courses/:id\" element={<Course/>} />\n          </Routes>\n        </div>\n        \n      </div>\n    )\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister()"],"sourceRoot":""}